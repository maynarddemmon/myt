#!/usr/bin/env node

// Gather Arguments
var exec = require('child_process').exec,
    arguments = process.argv.splice(2),
    manifestFile = arguments[0],
    targetFile = arguments[1],
    rootPath = arguments[2],
    outputSourceMap = arguments[3] === 'true',
    requiredFiles = arguments.splice(4);

// Basic argument validation
if (!manifestFile) return console.error('No manifest file provided.');
if (!targetFile) return console.error('No target file provided.');
if (!rootPath) return console.error('No root path provided.');
if (!requiredFiles.length > 0) return console.error('No required file provided.');

// Now use jsbuild to combine files
// The -P option removes the Package system from JS.Class which is not needed
// because we're combining everything together now.
var handleResults = function (error, stdout, stderr) {
        if (stdout) console.error('stdout: ' + stdout);
        if (stderr) console.error('stderr: ' + stderr);
        if (error) console.error('exec error: ' + error);
    },
    cmd = 'jsbuild -m ' + manifestFile + ' -P -r ' + rootPath + ' ' + 
        requiredFiles.join(' ') + ' > ' + targetFile;
console.error("Executing: " + cmd);
exec(cmd, function (error, stdout, stderr) {
    handleResults(error, stdout, stderr);
    
    // Then use closure compiler to compress the combined file and optionally
    // output a source map
    var minifiedFilePath = targetFile.substring(0, targetFile.length - 2) + 'min.js',
        sourceMapOpts = '';
    
    if (outputSourceMap) {
        // Get just the filename without any leading directories
        var parts = minifiedFilePath.split('/');
        sourceMapOpts = ' --source_map_format=V3 --create_source_map ' + minifiedFilePath + '.map' + 
            ' --output_wrapper "%output%\n//# sourceMappingURL=./' + parts[parts.length - 1] + '.map"';
    }
    
    var cmd = 'java -Xmx256m -jar bin/closure-compiler/compiler.jar --js ' + targetFile + 
        ' --js_output_file ' + minifiedFilePath + sourceMapOpts;
    console.error("Executing: " + cmd);
    exec(cmd, function (error, stdout, stderr) {
        handleResults(error, stdout, stderr);
        
        // Inject a sourceRoot into the source map file.
        if (outputSourceMap) {
            var fs = require('fs'),
                src = minifiedFilePath + '.map',
                fileData = fs.readFileSync(src, 'utf8');
            fs.writeFileSync(src, '{\n"sourceRoot":"../",' + fileData.substring(1), {"encoding":'utf8'});
        }
    });
});
